{"version":3,"sources":["components/Card.js","components/GameBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","useState","showCard","val","bgColor","state","setState","hide","prevState","setTimeout","correct","className","onClick","onMove","coordinate","value","GameBoard","sizeX","sizeY","boardState","showTitle","current_move","current_card","cardValues","numOfpairs","time","fin","level","goToMenu","nextLevel","card","checkMatch","cardA","cardB","pairs","assignCards","board","Array","fill","numOfCards","values","sort","a","b","localeCompare","splice","x","length","row","y","randNum","Math","floor","random","push","console","log","useEffect","interval","setInterval","clearInterval","startGame","style","gridTemplateColumns","repeat","map","col","textAlign","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.834404f4.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nconst Card = (props) => {\r\n    const [state, setState] = useState({\r\n        showCard:false,\r\n        val:'',\r\n        bgColor:'',\r\n    })\r\n\r\n    const handleClick = () => {\r\n        if(state.showCard === false) {\r\n            setState(prevState => ({\r\n                ...prevState,\r\n                showCard:true,\r\n                bgColor:'',\r\n            }));\r\n            props.onMove({coordinate: props.coordinate, value: props.value, hide: hide, correct:correct});\r\n            setTimeout(() => {\r\n                setState(prevState => ({\r\n                    ...prevState,\r\n                    val:props.value,\r\n                }));\r\n            }, 400);\r\n        }\r\n    }\r\n\r\n    const hide = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            bgColor:'bg-wrong',\r\n        }));\r\n        setTimeout(() => { \r\n            setState(prevState => ({\r\n                ...prevState,\r\n                showCard:false,\r\n                bgColor:'',\r\n                val:'',\r\n            }));\r\n        }, 1000);\r\n    }\r\n\r\n    const correct = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            bgColor:'bg-correct',\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\" onClick={() => handleClick()}>\r\n            {state.showCard ?\r\n                <div className={\"cardFront \"+ state.bgColor}>{state.val}</div>\r\n            :\r\n                <div className=\"cardBack\"></div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, {useState, useEffect} from 'react';\r\nimport Card from './Card';\r\n\r\nconst GameBoard = () => {\r\n    const [state, setState] = useState({\r\n        sizeX: 2,\r\n        sizeY: 2,\r\n        boardState: [],\r\n        showTitle: true,\r\n        current_move: 0,\r\n        current_card: null,\r\n        cardValues: ['Dog', 'Cat', 'Mouse', 'Cow', 'Fish', 'Snake', 'Shark', 'Donkey', 'Hourse', 'Bird', 'Eagle',  'Rat', 'Snail', 'Bug', 'Worm', 'Ant', 'Panda', 'Monkey'],\r\n        numOfpairs:0,\r\n        time: 0,\r\n        fin:false,\r\n        level: 1,\r\n    });\r\n    /* -------------------- Navigation Section -------------------- */\r\n    const startGame = () => {\r\n        /* start new game */\r\n        const board = assignCards()\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            boardState:board,\r\n            showTitle:false,\r\n            numOfpairs: state.sizeX * state.sizeY * state.level * state.level / 2,\r\n            current_move:0,\r\n            current_card: null,\r\n            time:0,\r\n        }));\r\n    }\r\n\r\n    const goToMenu = (nextLevel) => {\r\n        /* navigate to main menu */\r\n        let level = state.level;\r\n        if(nextLevel) level++;\r\n        if(level === 4) level = 1;\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            showTitle:true,\r\n            fin:false,\r\n            level: level,\r\n        }));\r\n    }\r\n\r\n    /* -------------------- Game Section -------------------- */\r\n    const onMove = (card) => {\r\n        /* called when on card click */\r\n        if(state.current_card == null) {\r\n            // case first card flip\r\n            setState(prevState => ({\r\n                ...prevState,\r\n                current_card:card,\r\n            }));\r\n        } else {\r\n            // check for match\r\n            checkMatch(card, state.current_card);\r\n        }\r\n    }\r\n\r\n    const checkMatch = (cardA, cardB) => {\r\n        /* compair two cards for a match */\r\n        let pairs = state.numOfpairs;\r\n        let fin = false;\r\n        if(cardA.value === cardB.value && cardA.coordinate !== cardB.coordinate) {\r\n            // case match\r\n            cardA.correct();\r\n            cardB.correct();\r\n            pairs--;\r\n            if(pairs === 0) {\r\n                // case winner\r\n                fin = true;\r\n            }\r\n        } else {\r\n            // case no match\r\n            cardA.hide();\r\n            cardB.hide(); \r\n        }\r\n        // reset values\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            current_card:null,\r\n            current_move:state.current_move+1,\r\n            numOfpairs:pairs,\r\n            fin: fin,\r\n        }));\r\n    }\r\n\r\n    const assignCards = () => {\r\n        /* assign cards to board */\r\n        let board = new Array(state.sizeX*state.level).fill(new Array(state.sizeY*state.level).fill(null));\r\n        const numOfCards = state.sizeX * state.sizeY * state.level * state.level;\r\n        let values = [...state.cardValues, ...state.cardValues].sort((a, b) =>\r\n            a.localeCompare(b)\r\n        ).splice(0, numOfCards);\r\n        for(let x = 0; x < board.length; x++) {\r\n            let row = [];\r\n            for(let y = 0; y < board[x].length; y++) {\r\n                const randNum = Math.floor(Math.random() * (values.length));\r\n                const val = values[randNum];\r\n                values.splice(randNum, 1);\r\n                row.push(val);\r\n            }\r\n            board[x] = row;\r\n        }\r\n        console.log(board);\r\n        return board;\r\n    }\r\n\r\n    /* -------------------- Render Section -------------------- */\r\n    const generateBoard = () => {\r\n        return state.boardState.map( (x, col) => {\r\n            return [...state.boardState[col]].map((x, row) => {\r\n                return(\r\n                    <Card key={row} coordinate={{x:col, y:row}} value={state.boardState[col][row]} onMove={onMove}></Card>\r\n                )\r\n            });\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(!state.showTitle && !state.fin) {\r\n            const interval = setInterval(() => {\r\n                setState(prevState => ({\r\n                    ...prevState,\r\n                    time:state.time+1,\r\n                }));\r\n            }, 1000);\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [state.showTitle, state.time, state.fin]);\r\n\r\n    return (\r\n        <div className=\"GameBoard\">\r\n            {state.showTitle ? \r\n                <div className=\"GameMenu\">\r\n                    <div className=\"GameTitle row\">\r\n                        <h1>Memory Game</h1>\r\n                    </div>\r\n                    <div className=\"GameTitle row\">\r\n                        <h3>Level <span>{state.level}</span></h3>\r\n                    </div>\r\n                    <button className=\"playBtn\" onClick={() => startGame()}>PLAY</button>\r\n                </div>\r\n                :\r\n                <div className=\"Game\">\r\n                    <div className=\"topRow row\">\r\n                        <button className=\"backBtn\" onClick={() => goToMenu()}>BACK</button>\r\n                        <h3 className=\"subTitle\">LEVEL: <span className=\"time\">{state.level}</span></h3> \r\n                        <h3 className=\"subTitle\">MOVES: <span className=\"movesNum\">{state.current_move}</span></h3>\r\n                        <h3 className=\"subTitle\">TIME: <span className=\"time\">{state.time}</span></h3>\r\n                    </div>\r\n                    <div className=\"Board\" style={{gridTemplateColumns: '1fr '.repeat(state.sizeX*state.level)}}>\r\n                        {generateBoard()}\r\n                    </div>\r\n                </div>\r\n            }\r\n            {state.fin && \r\n                <div className=\"popup\">\r\n                    <h1>Congratulation!</h1>\r\n                    <table className=\"stats\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td style={{textAlign: 'right'}}>Level:</td>\r\n                                <td>{state.level}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{textAlign: 'right'}}>Number of Moves:</td>\r\n                                <td>{state.current_move}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{textAlign: 'right'}}>Time:</td>\r\n                                <td>{state.time}s</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <button className=\"menuBtn\" onClick={() => goToMenu(true)}>MENU</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameBoard;\r\n","import './App.css';\nimport './css/GameBoard.css';\n\nimport GameBoard from './components/GameBoard';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n        <GameBoard></GameBoard>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}